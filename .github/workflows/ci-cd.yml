name: Fine Acers CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: registry.fineacers.com

jobs:
  # Testing Stage
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test:unit -- --coverage
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Fine Acers'
        path: '.'
        format: 'HTML'
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build Stage
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/fineacers:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/fineacers:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy Stage (Canary)
  deploy-canary:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Canary
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      env:
        DEPLOYMENT_STRATEGY: canary
        CANARY_PERCENTAGE: 10
      run: |
        doctl kubernetes cluster kubeconfig save fine-acers-prod
        kubectl set image deployment/api api=${{ env.DOCKER_REGISTRY }}/fineacers:${{ github.sha }} \
          -n production --record
        kubectl rollout status deployment/api -n production
    
    - name: Run smoke tests
      run: |
        npm run test:smoke -- --url https://canary.fineacers.com
    
    - name: Monitor canary metrics
      run: |
        npm run monitor:canary -- --duration 300 --threshold 0.01

  # Deploy Stage (Production)
  deploy-production:
    needs: deploy-canary
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Full production rollout
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      run: |
        doctl kubernetes cluster kubeconfig save fine-acers-prod
        kubectl patch deployment/api -n production \
          -p '{"spec":{"template":{"spec":{"containers":[{"name":"api","image":"${{ env.DOCKER_REGISTRY }}/fineacers:${{ github.sha }}"}]}}}}'
        kubectl rollout status deployment/api -n production
    
    - name: Update feature flags
      run: |
        curl -X POST https://api.fineacers.com/feature-flags/sync \
          -H "Authorization: Bearer ${{ secrets.FEATURE_FLAG_TOKEN }}" \
          -d '{"deployment":"${{ github.sha }}"}'